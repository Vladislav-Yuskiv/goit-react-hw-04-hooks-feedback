{"version":3,"sources":["Components/Statistics/Statistics.module.css","Components/FeedbackOptions/FeedbackOptions.module.css","Components/Seaction/Seaction.module.css","Components/Notification/Notification.module.css","Components/Statistics/Statistics.js","Components/FeedbackOptions/FeedbackOptions.js","Components/Seaction/Seaction.js","Components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Statistics","good","neutral","bad","total","positivePercentage","className","s","text","FeedbackOptions","options","onLeaveFeedback","map","option","name","onClick","button","Section","title","children","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","countPositiveFeedbackPercentage","Math","floor","e","currentTarget","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IACAA,EAAOC,QAAU,CAAC,KAAO,2B,mBCAzBD,EAAOC,QAAU,CAAC,OAAS,kC,gBCA3BD,EAAOC,QAAU,CAAC,MAAQ,0B,gBCA1BD,EAAOC,QAAU,CAAC,QAAU,gC,2GCsBbC,MAnBf,YAAuE,IAAhDC,EAA+C,EAA/CA,KAAKC,EAA0C,EAA1CA,QAAQC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBACxC,OACI,qCACI,oBAAGC,UAAWC,IAAEC,KAAhB,mBAA6BP,KAC7B,oBAAGK,UAAWC,IAAEC,KAAhB,sBAAgCN,KAChC,oBAAGI,UAAWC,IAAEC,KAAhB,iBAA2BL,KAC3B,oBAAGG,UAAWC,IAAEC,KAAhB,mBAA6BJ,KAC7B,oBAAGE,UAAWC,IAAEC,KAAhB,gCAA0CH,EAA1C,W,gBCSDI,MAhBf,YAA0D,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAC9B,OACI,mCACKD,EAAQE,KAAI,SAAAC,GAEV,OAAQ,yBAAqBC,KAAMD,EAAQE,QAASJ,EAAiBL,UAAWC,IAAES,OAA1E,cAAoFH,EAApF,MAAaA,S,gBCMzBI,MAZf,YAAwC,IAApBC,EAAmB,EAAnBA,MAAQC,EAAW,EAAXA,SACpB,OACI,oCACI,oBAAIb,UAAWC,IAAEW,MAAjB,SAAyBA,IACxBC,M,gBCMFC,MAVf,YAAqC,IAAZC,EAAW,EAAXA,QACjB,OACI,mCACI,mBAAGf,UAAWC,IAAEc,QAAhB,SAA0BA,OC0D3BC,MAzDf,WAGG,MAAwBC,mBAAS,GAAjC,mBAAOtB,EAAP,KAAauB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOrB,EAAP,KAAgBuB,EAAhB,KACC,EAAsBF,mBAAS,GAA/B,mBAAOpB,EAAP,KAAYuB,EAAZ,KAsBQC,EAAqB1B,EAAOC,EAAUC,EACtCyB,EAAkCC,KAAKC,MAAO7B,EAAO0B,EAAsB,KACjF,OACF,qCAEK,cAAC,EAAD,CAAST,MAAO,wBAAhB,SACG,cAAC,EAAD,CACGR,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBA5Bc,SAACoB,GAGxB,OAFiBA,EAAEC,cAAXlB,MAGL,IAAK,OACFU,EAAQvB,EAAO,GACf,MACH,IAAK,UACFwB,EAAWvB,EAAU,GACrB,MACH,IAAK,MACFwB,EAAOvB,EAAM,GACb,MACH,QACG,aAiBH,eAAC,EAAD,CAASe,MAAO,aAAhB,UACIS,EACK,cAAC,EAAD,CACM1B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOuB,EACPtB,mBAAoBuB,IAEzB,KAEND,EAAqB,KAAO,cAAC,EAAD,CAAcN,QAAQ,6BC5ChDY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.264ccde9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Statistics_text__IN5bC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__PoLsa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Seaction_title__1qshH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__pYaHb\"};","import React from 'react';\r\nimport s from './Statistics.module.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Statistics ({ good,neutral,bad ,total ,positivePercentage }) {\r\n        return (\r\n            <>\r\n                <p className={s.text}>Good: {good}</p>\r\n                <p className={s.text}>Neutral: {neutral}</p>\r\n                <p className={s.text}>Bad:{bad}</p>\r\n                <p className={s.text}>Total:{total}</p>\r\n                <p className={s.text}>Positive feedback: {positivePercentage}%</p>\r\n            </>\r\n        )\r\n    }\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage:PropTypes.number.isRequired,\r\n}\r\nexport default Statistics;","import React  from 'react';\r\nimport s from './FeedbackOptions.module.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction FeedbackOptions ( { options, onLeaveFeedback }) { \r\n        return (\r\n            <>\r\n                {options.map(option => {\r\n                    \r\n                   return  <button key={option} name={option} onClick={onLeaveFeedback} className={s.button}> {option} </button>\r\n                })}\r\n            </>\r\n        )\r\n    }\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.array.isRequired,\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n    \r\n}\r\nexport default FeedbackOptions; ","import React from 'react';\r\nimport s from './Seaction.module.css';\r\nimport PropTypes from \"prop-types\";\r\nfunction Section ({ title , children }){\r\n        return (\r\n            <section>\r\n                <h2 className={s.title}>{title}</h2>\r\n                {children}\r\n            </section>\r\n        )\r\n    }\r\n\r\nSection.propTypes = {\r\n    title : PropTypes.string ,\r\n}\r\nexport default Section;","import React from 'react';\r\nimport s from './Notification.module.css';\r\nimport PropTypes from \"prop-types\";\r\nfunction Notification ({ message }) {\r\n        return (\r\n            <>\r\n                <p className={s.message}>{message}</p>\r\n            </>\r\n        )\r\n    }\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n}\r\nexport default Notification;","\nimport React , {useState} from 'react';\nimport Statistics from './Components/Statistics';\nimport FeedbackOptions from './Components/FeedbackOptions';\nimport Section from './Components/Seaction';\nimport Notification from './Components/Notification';\n\nfunction App () {\n\n  \n   const [good, setGood] = useState(0);\n   const [neutral, setNeutral] = useState(0);\n    const [bad, setBad] = useState(0);\n   \n   const handleButtonClick = (e) => {\n      const { name } = e.currentTarget;\n      \n      switch (name) {\n         case 'good':\n            setGood(good + 1)\n            break;\n         case 'neutral':\n            setNeutral(neutral + 1)\n            break;\n         case 'bad':\n            setBad(bad + 1)\n            break;\n         default:\n            return;\n      }\n         \n        \n   }\n\n      const countTotalFeedback = good + neutral + bad;\n      const countPositiveFeedbackPercentage = Math.floor((good / countTotalFeedback) * 100);\n      return (\n    <>\n       \n         <Section title={'Please leave feedback'}>\n            <FeedbackOptions\n               options={['good', 'neutral', 'bad']}\n               onLeaveFeedback={handleButtonClick}\n            />\n         </Section>\n         <Section title={'Statistics'}>\n            {countTotalFeedback ? (\n                  <Statistics \n                        good={good}\n                        neutral={neutral}\n                        bad={bad}\n                        total={countTotalFeedback}\n                        positivePercentage={countPositiveFeedbackPercentage}\n                  />\n               ) : null}\n\n            {countTotalFeedback ? null : <Notification message=\"No feedback given\" />}\n         </Section> \n    </>\n    \n );\n }\n\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}